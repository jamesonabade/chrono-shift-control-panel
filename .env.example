
# ====================================================================
# CONFIGURAÇÃO PARA DEPLOY COM PORTAINER STACK
# ====================================================================
# 
# Este arquivo contém as variáveis de ambiente necessárias para
# configurar o sistema em produção usando Portainer Stack.
# 
# IMPORTANTE: Copie este conteúdo para as "Environment variables"
# do seu stack no Portainer, NÃO precisa ter arquivos locais!
#
# ====================================================================

# === CONFIGURAÇÕES BÁSICAS ===
STACK_NAME=sistema-producao
NODE_ENV=production

# === REPOSITÓRIO GIT (Para build automático) ===
# Configure seu repositório GitHub para build automático
GITHUB_USER=seu-usuario
GITHUB_REPO=seu-repositorio

# === DOMÍNIO E CONTEXTO ===
# Para uso em subpath (ex: https://dominio.com/scripts/)
DOMAIN=seu-dominio.com
BASE_PATH=/scripts

# === PORTAS (opcional) ===
HTTP_PORT=80
HTTPS_PORT=443

# === URLs DA APLICAÇÃO (auto-configuradas) ===
VITE_API_URL=/scripts/api
VITE_BASE_PATH=/scripts
VITE_PUBLIC_URL=https://seu-dominio.com/scripts

# === IMAGENS DOCKER (opcional - para usar imagens pré-construídas) ===
# Descomente se você tiver imagens prontas em um registry
# FRONTEND_IMAGE=your-registry/sistema-frontend:latest
# BACKEND_IMAGE=your-registry/sistema-backend:latest

# === BANCO DE DADOS ===
POSTGRES_DB=sistema_db
POSTGRES_USER=sistema_user
POSTGRES_PASSWORD=sua-senha-db-muito-segura

# === AUTENTICAÇÃO ===
# ALTERE ESTAS SENHAS PARA PRODUÇÃO!
ADMIN_PASSWORD=sua-senha-admin-muito-segura
USER_PASSWORD=sua-senha-user-segura

# Chave secreta para JWT (gere uma chave aleatória segura)
JWT_SECRET=chave-jwt-super-secreta-aleatoria-256-bits

# === CONFIGURAÇÕES DE CORS ===
CORS_ORIGIN=*

# === PERSONALIZAÇÃO DO SISTEMA ===
SYSTEM_TITLE=PAINEL DE CONTROLE
SYSTEM_SUBTITLE=Sistema de Gerenciamento Docker

# ====================================================================
# EXEMPLOS DE CONFIGURAÇÃO POR AMBIENTE
# ====================================================================

# --- CONFIGURAÇÃO 1: DOMÍNIO PRINCIPAL ---
# DOMAIN=sistema.empresa.com
# BASE_PATH=
# VITE_API_URL=/api
# VITE_BASE_PATH=/
# VITE_PUBLIC_URL=https://sistema.empresa.com

# --- CONFIGURAÇÃO 2: SUBPATH ---
# DOMAIN=empresa.com
# BASE_PATH=/sistema
# VITE_API_URL=/sistema/api
# VITE_BASE_PATH=/sistema
# VITE_PUBLIC_URL=https://empresa.com/sistema

# --- CONFIGURAÇÃO 3: DESENVOLVIMENTO LOCAL ---
# DOMAIN=localhost
# BASE_PATH=
# VITE_API_URL=http://localhost/api
# VITE_BASE_PATH=/
# VITE_PUBLIC_URL=http://localhost

# ====================================================================
# OPÇÕES DE DEPLOY
# ====================================================================

# OPÇÃO 1: BUILD AUTOMÁTICO DO REPOSITÓRIO GIT
# Configure GITHUB_USER e GITHUB_REPO acima
# O Portainer fará build automaticamente do seu repositório

# OPÇÃO 2: USAR IMAGENS PRÉ-CONSTRUÍDAS
# Descomente FRONTEND_IMAGE e BACKEND_IMAGE
# E comente as seções 'build:' no docker-compose.prod.yml

# ====================================================================
# GUIA RÁPIDO PARA PORTAINER
# ====================================================================
#
# MÉTODO 1: BUILD AUTOMÁTICO (Recomendado)
# 1. Suba seu código para GitHub
# 2. Configure GITHUB_USER e GITHUB_REPO
# 3. Acesse Portainer > Stacks > Add stack
# 4. Nome do stack: sistema-producao
# 5. Cole o conteúdo do docker-compose.prod.yml
# 6. Na seção "Environment variables", adicione as variáveis acima
# 7. Clique em "Deploy the stack"
# 8. Aguarde o build e inicialização (pode demorar alguns minutos)
# 9. Acesse o sistema pela URL configurada
#
# MÉTODO 2: IMAGENS PRÉ-CONSTRUÍDAS
# 1. Construa suas imagens: docker build -t my-registry/frontend .
# 2. Envie para registry: docker push my-registry/frontend
# 3. Configure FRONTEND_IMAGE e BACKEND_IMAGE
# 4. Siga passos 3-9 do Método 1
#
# VOLUMES: Todos os dados serão persistidos em volumes Docker
# nomeados automaticamente (sistema_data_sistema-producao, etc.)
#
# BACKUP: Use 'docker volume ls' para listar volumes
# Use 'docker run --rm -v volume_name:/data -v $(pwd):/backup 
# alpine tar czf /backup/backup.tar.gz -C /data .' para backup
#
# ====================================================================

# ====================================================================
# SEGURANÇA EM PRODUÇÃO
# ====================================================================
#
# OBRIGATÓRIO ALTERAR:
# - ADMIN_PASSWORD (senha do administrador)
# - USER_PASSWORD (senha do usuário padrão)
# - JWT_SECRET (chave de 32+ caracteres aleatórios)
# - POSTGRES_PASSWORD (senha do banco de dados)
#
# GERAR SENHAS SEGURAS:
# openssl rand -base64 32  # Para senhas
# openssl rand -hex 64     # Para JWT_SECRET
#
# ====================================================================
