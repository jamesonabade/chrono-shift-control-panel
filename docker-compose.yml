
version: '3.8'

services:
  event-management:
    build: .
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - VITE_APP_ENV=docker
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./scripts:/app/scripts
      - ./logs:/app/logs
      - app_data:/app/data
    command: npm run dev -- --host 0.0.0.0 --port 8080
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api-server:
    image: node:18-alpine
    ports:
      - "3001:3001"
    volumes:
      - ./scripts:/app/scripts
      - ./api:/app/api
    working_dir: /app
    command: >
      sh -c "
      apk add --no-cache bash &&
      cat > server.js << 'EOF'
      const http = require('http');
      const fs = require('fs');
      const path = require('path');
      const { exec } = require('child_process');

      const server = http.createServer((req, res) => {
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, DELETE, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

        if (req.method === 'OPTIONS') {
          res.writeHead(200);
          res.end();
          return;
        }

        if (req.url === '/api/set-env' && req.method === 'POST') {
          let body = '';
          req.on('data', chunk => body += chunk);
          req.on('end', () => {
            try {
              const envVars = JSON.parse(body);
              Object.entries(envVars).forEach(([key, value]) => {
                process.env[key] = value;
                console.log(\`Set \${key}=\${value}\`);
              });
              res.writeHead(200, {'Content-Type': 'application/json'});
              res.end(JSON.stringify({success: true}));
            } catch (e) {
              res.writeHead(400);
              res.end('Invalid JSON');
            }
          });
        } else if (req.url === '/api/execute-script' && req.method === 'POST') {
          let body = '';
          req.on('data', chunk => body += chunk);
          req.on('end', () => {
            try {
              const data = JSON.parse(body);
              console.log('Executing script:', data);
              res.writeHead(200, {'Content-Type': 'application/json'});
              res.end(JSON.stringify({success: true}));
            } catch (e) {
              res.writeHead(400);
              res.end('Invalid JSON');
            }
          });
        } else {
          res.writeHead(404);
          res.end('Not Found');
        }
      });

      server.listen(3001, '0.0.0.0', () => {
        console.log('API Server running on port 3001');
      });
      EOF
      node server.js
      "
    restart: unless-stopped

volumes:
  app_data:
