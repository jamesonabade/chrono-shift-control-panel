
version: '3.8'

services:
  event-management:
    build: .
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - VITE_APP_ENV=docker
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./scripts:/app/scripts
      - ./logs:/app/logs
      - app_data:/app/data
    command: npm run dev -- --host 0.0.0.0 --port 8080
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api-server:
    image: node:18-alpine
    ports:
      - "3001:3001"
    volumes:
      - ./scripts:/app/scripts
      - ./api:/app/api
      - ./logs:/app/logs
    working_dir: /app
    command: >
      sh -c "
      apk add --no-cache bash &&
      mkdir -p /app/scripts /app/logs &&
      cat > server.js << 'EOF'
      const http = require('http');
      const fs = require('fs');
      const path = require('path');
      const { exec } = require('child_process');
      const formidable = require('formidable');

      const server = http.createServer((req, res) => {
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, DELETE, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

        if (req.method === 'OPTIONS') {
          res.writeHead(200);
          res.end();
          return;
        }

        // Set environment variables
        if (req.url === '/api/set-env' && req.method === 'POST') {
          let body = '';
          req.on('data', chunk => body += chunk);
          req.on('end', () => {
            try {
              const envVars = JSON.parse(body);
              const envFile = '/app/scripts/.env';
              let envContent = '';
              
              Object.entries(envVars).forEach(([key, value]) => {
                process.env[key] = value;
                envContent += \`\${key}=\${value}\n\`;
                console.log(\`[ENV] Set \${key}=\${value}\`);
              });
              
              fs.writeFileSync(envFile, envContent);
              console.log(\`[ENV] Environment file saved to \${envFile}\`);
              
              res.writeHead(200, {'Content-Type': 'application/json'});
              res.end(JSON.stringify({success: true, envFile}));
            } catch (e) {
              console.error('[ENV ERROR]', e);
              res.writeHead(400);
              res.end('Invalid JSON');
            }
          });
        }
        
        // Upload script
        else if (req.url === '/api/upload-script' && req.method === 'POST') {
          const form = new formidable.IncomingForm();
          form.uploadDir = '/app/scripts';
          form.keepExtensions = true;
          
          form.parse(req, (err, fields, files) => {
            if (err) {
              console.error('[UPLOAD ERROR]', err);
              res.writeHead(500);
              res.end('Upload failed');
              return;
            }
            
            const file = files.script;
            const type = fields.type;
            const fileName = file.originalFilename;
            const targetPath = path.join('/app/scripts', fileName);
            
            fs.renameSync(file.filepath, targetPath);
            fs.chmodSync(targetPath, '755');
            
            console.log(\`[SCRIPT] Uploaded \${fileName} to \${targetPath}\`);
            
            res.writeHead(200, {'Content-Type': 'application/json'});
            res.end(JSON.stringify({
              success: true,
              path: targetPath,
              fileName: fileName
            }));
          });
        }
        
        // List scripts
        else if (req.url === '/api/scripts' && req.method === 'GET') {
          try {
            const scriptsDir = '/app/scripts';
            const files = fs.readdirSync(scriptsDir);
            const scripts = files
              .filter(file => file.endsWith('.sh') || file.endsWith('.bash'))
              .map(file => {
                const filePath = path.join(scriptsDir, file);
                const stats = fs.statSync(filePath);
                return {
                  name: file,
                  size: stats.size,
                  uploadDate: stats.mtime.toISOString(),
                  type: file.includes('date') || file.includes('data') ? 'date' : 'database'
                };
              });
            
            res.writeHead(200, {'Content-Type': 'application/json'});
            res.end(JSON.stringify(scripts));
          } catch (e) {
            console.error('[LIST ERROR]', e);
            res.writeHead(500);
            res.end('Failed to list scripts');
          }
        }
        
        // Download script
        else if (req.url.startsWith('/api/download-script/') && req.method === 'GET') {
          const fileName = req.url.split('/').pop();
          const filePath = path.join('/app/scripts', fileName);
          
          try {
            if (fs.existsSync(filePath)) {
              const content = fs.readFileSync(filePath);
              res.writeHead(200, {
                'Content-Type': 'application/octet-stream',
                'Content-Disposition': \`attachment; filename=\${fileName}\`
              });
              res.end(content);
            } else {
              res.writeHead(404);
              res.end('File not found');
            }
          } catch (e) {
            console.error('[DOWNLOAD ERROR]', e);
            res.writeHead(500);
            res.end('Download failed');
          }
        }
        
        // Delete script
        else if (req.url.startsWith('/api/delete-script/') && req.method === 'DELETE') {
          const fileName = req.url.split('/').pop();
          const filePath = path.join('/app/scripts', fileName);
          
          try {
            if (fs.existsSync(filePath)) {
              fs.unlinkSync(filePath);
              console.log(\`[DELETE] Removed \${fileName}\`);
              res.writeHead(200, {'Content-Type': 'application/json'});
              res.end(JSON.stringify({success: true}));
            } else {
              res.writeHead(404);
              res.end('File not found');
            }
          } catch (e) {
            console.error('[DELETE ERROR]', e);
            res.writeHead(500);
            res.end('Delete failed');
          }
        }
        
        // Execute script
        else if (req.url === '/api/execute-script' && req.method === 'POST') {
          let body = '';
          req.on('data', chunk => body += chunk);
          req.on('end', () => {
            try {
              const data = JSON.parse(body);
              const { scriptName, environment } = data;
              
              const scriptPath = path.join('/app/scripts', scriptName);
              const logFile = \`/app/logs/execution_\${Date.now()}.log\`;
              
              if (!fs.existsSync(scriptPath)) {
                res.writeHead(404);
                res.end('Script not found');
                return;
              }
              
              // Set environment variables before execution
              const envVars = Object.entries(environment || {})
                .map(([key, value]) => \`export \${key}=\${value}\`)
                .join(' && ');
              
              const command = envVars ? 
                \`\${envVars} && bash \${scriptPath}\` : 
                \`bash \${scriptPath}\`;
              
              console.log(\`[EXECUTE] Running: \${command}\`);
              
              exec(command, { cwd: '/app/scripts' }, (error, stdout, stderr) => {
                const logContent = \`
Execution Time: \${new Date().toISOString()}
Command: \${command}
Exit Code: \${error ? error.code : 0}

STDOUT:
\${stdout}

STDERR:
\${stderr}

ERROR:
\${error ? error.message : 'None'}
                \`.trim();
                
                fs.writeFileSync(logFile, logContent);
                
                if (error) {
                  console.error('[EXECUTE ERROR]', error);
                  res.writeHead(500, {'Content-Type': 'application/json'});
                  res.end(JSON.stringify({
                    success: false,
                    error: error.message,
                    logFile
                  }));
                } else {
                  console.log('[EXECUTE SUCCESS]', stdout);
                  res.writeHead(200, {'Content-Type': 'application/json'});
                  res.end(JSON.stringify({
                    success: true,
                    output: stdout,
                    logFile
                  }));
                }
              });
              
            } catch (e) {
              console.error('[EXECUTE PARSE ERROR]', e);
              res.writeHead(400);
              res.end('Invalid JSON');
            }
          });
        }
        
        else {
          res.writeHead(404);
          res.end('Not Found');
        }
      });

      server.listen(3001, '0.0.0.0', () => {
        console.log('API Server running on port 3001');
      });
      EOF
      npm init -y &&
      npm install formidable &&
      node server.js
      "
    restart: unless-stopped

volumes:
  app_data:
