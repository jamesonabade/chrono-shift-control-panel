
#!/bin/bash

echo "üöÄ Iniciando configura√ß√£o do sistema de produ√ß√£o..."

# Fun√ß√£o para log colorido
log() {
    echo -e "\033[32m[$(date '+%Y-%m-%d %H:%M:%S')] $1\033[0m"
}

error() {
    echo -e "\033[31m[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1\033[0m"
}

warning() {
    echo -e "\033[33m[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $1\033[0m"
}

# Verificar se √© primeira execu√ß√£o
FIRST_RUN_FILE="/app/data/.first_run_complete"

# Aguardar um pouco para outros servi√ßos iniciarem
sleep 5

if [ ! -f "$FIRST_RUN_FILE" ]; then
    log "üéØ Primeira execu√ß√£o detectada - configurando sistema..."
    
    # Criar diret√≥rios necess√°rios
    log "üìÅ Criando estrutura de diret√≥rios..."
    mkdir -p /app/data /app/scripts /app/logs /app/uploads
    
    # Definir permiss√µes
    log "üîí Configurando permiss√µes..."
    chmod 755 /app/data /app/scripts /app/logs /app/uploads
    
    # Criar configura√ß√£o inicial do sistema
    log "‚öôÔ∏è Criando configura√ß√£o inicial..."
    cat > /app/data/system-config.json << EOF
{
  "version": "1.0.0",
  "initialized": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
  "environment": "${NODE_ENV:-production}",
  "domain": "${DOMAIN:-localhost}",
  "basePath": "${BASE_PATH:-}",
  "users": {
    "administrador": "${ADMIN_PASSWORD:-admin123}",
    "usuario": "${USER_PASSWORD:-user123}"
  },
  "customizations": {
    "title": "${SYSTEM_TITLE:-PAINEL DE CONTROLE}",
    "subtitle": "${SYSTEM_SUBTITLE:-Sistema de Gerenciamento Docker}",
    "background": "",
    "logo": "",
    "favicon": ""
  },
  "systemVariables": {
    "NODE_ENV": "${NODE_ENV:-production}",
    "DOMAIN": "${DOMAIN:-localhost}",
    "BASE_PATH": "${BASE_PATH:-}",
    "CORS_ORIGIN": "${CORS_ORIGIN:-*}"
  },
  "lastUpdated": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
}
EOF
    
    # Configurar logs iniciais
    log "üìù Configurando logs do sistema..."
    cat > /app/logs/system.log << EOF
[$(date '+%Y-%m-%d %H:%M:%S')] Sistema inicializado em produ√ß√£o
[$(date '+%Y-%m-%d %H:%M:%S')] Dom√≠nio: ${DOMAIN:-localhost}
[$(date '+%Y-%m-%d %H:%M:%S')] Base Path: ${BASE_PATH:-/}
[$(date '+%Y-%m-%d %H:%M:%S')] Ambiente: ${NODE_ENV:-production}
EOF
    
    # Marcar primeira execu√ß√£o como conclu√≠da
    touch "$FIRST_RUN_FILE"
    echo "$(date '+%Y-%m-%d %H:%M:%S')" > "$FIRST_RUN_FILE"
    log "‚úÖ Configura√ß√£o inicial conclu√≠da!"
else
    log "üîÑ Sistema j√° configurado - carregando configura√ß√µes existentes..."
    
    # Atualizar senhas se as vari√°veis de ambiente mudaram
    if [ ! -z "$ADMIN_PASSWORD" ] || [ ! -z "$USER_PASSWORD" ]; then
        log "üîê Atualizando senhas a partir das vari√°veis de ambiente..."
        
        CONFIG_FILE="/app/data/system-config.json"
        if [ -f "$CONFIG_FILE" ]; then
            # Criar backup da configura√ß√£o
            cp "$CONFIG_FILE" "$CONFIG_FILE.backup"
            
            # Atualizar senhas usando jq se dispon√≠vel, sen√£o usar sed
            if command -v jq >/dev/null 2>&1; then
                if [ ! -z "$ADMIN_PASSWORD" ]; then
                    jq ".users.administrador = \"$ADMIN_PASSWORD\"" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
                    log "üîë Senha do administrador atualizada via jq"
                fi
                
                if [ ! -z "$USER_PASSWORD" ]; then
                    jq ".users.usuario = \"$USER_PASSWORD\"" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
                    log "üîë Senha do usu√°rio atualizada via jq"
                fi
                
                # Atualizar timestamp
                jq ".lastUpdated = \"$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)\"" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
            else
                warning "jq n√£o dispon√≠vel, usando sed..."
                if [ ! -z "$ADMIN_PASSWORD" ]; then
                    sed -i "s/\"administrador\": \"[^\"]*\"/\"administrador\": \"$ADMIN_PASSWORD\"/g" "$CONFIG_FILE"
                    log "üîë Senha do administrador atualizada via sed"
                fi
                
                if [ ! -z "$USER_PASSWORD" ]; then
                    sed -i "s/\"usuario\": \"[^\"]*\"/\"usuario\": \"$USER_PASSWORD\"/g" "$CONFIG_FILE"
                    log "üîë Senha do usu√°rio atualizada via sed"
                fi
            fi
        fi
    fi
fi

# Verificar conectividade com Docker
log "üê≥ Verificando conectividade com Docker..."
if docker version > /dev/null 2>&1; then
    log "‚úÖ Docker conectado com sucesso"
    docker --version | sed 's/^/   ‚Ä¢ /'
else
    error "‚ùå N√£o foi poss√≠vel conectar ao Docker"
    warning "Verifique se o socket do Docker est√° montado corretamente"
fi

# Verificar e criar volumes se necess√°rio
log "üíæ Verificando volumes de dados..."
for dir in data scripts logs uploads; do
    if [ -d "/app/$dir" ] && [ -w "/app/$dir" ]; then
        log "   ‚úÖ Volume $dir: OK"
    else
        warning "   ‚ö†Ô∏è Volume $dir: Problema de acesso"
        mkdir -p "/app/$dir" 2>/dev/null || true
        chmod 755 "/app/$dir" 2>/dev/null || true
    fi
done

# Verificar sa√∫de dos servi√ßos externos
log "üîó Verificando conectividade de rede..."
if ping -c 1 -W 2 google.com > /dev/null 2>&1; then
    log "   ‚úÖ Conectividade externa: OK"
else
    warning "   ‚ö†Ô∏è Conectividade externa: Limitada"
fi

# Limpeza de logs antigos (manter √∫ltimos 30 dias)
log "üßπ Limpeza de logs antigos..."
find /app/logs -name "*.log" -type f -mtime +30 -delete 2>/dev/null || true

# Exibir informa√ß√µes do sistema
log "üìä Informa√ß√µes do sistema:"
log "   ‚Ä¢ Hostname: $(hostname)"
log "   ‚Ä¢ IP: $(hostname -i 2>/dev/null || echo 'N/A')"
log "   ‚Ä¢ Ambiente: ${NODE_ENV:-development}"
log "   ‚Ä¢ Porta: ${PORT:-3001}"
log "   ‚Ä¢ Dom√≠nio: ${DOMAIN:-localhost}"
log "   ‚Ä¢ Base Path: ${BASE_PATH:-/}"
log "   ‚Ä¢ Diret√≥rio de dados: ${DATA_DIR:-/app/data}"
log "   ‚Ä¢ Diret√≥rio de scripts: ${SCRIPTS_DIR:-/app/scripts}"
log "   ‚Ä¢ Timezone: $(date +%Z)"
log "   ‚Ä¢ Data/Hora: $(date)"

# Verificar espa√ßo em disco
DISK_USAGE=$(df -h /app | awk 'NR==2{print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 80 ]; then
    warning "   ‚ö†Ô∏è Espa√ßo em disco baixo: ${DISK_USAGE}%"
else
    log "   ‚Ä¢ Espa√ßo em disco: ${DISK_USAGE}% usado"
fi

# Executar servidor
log "üöÄ Iniciando servidor Node.js..."
log "Sistema pronto para uso em: ${DOMAIN:-localhost}${BASE_PATH:-}"

exec node server.js
