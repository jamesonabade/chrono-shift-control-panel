
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  role        Role     @default(USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Relacionamentos
  sessions        Session[]
  logs            SystemLog[]
  dateActions     DateAction[]
  databaseActions DatabaseAction[]
  scriptActions   ScriptAction[]
  commandActions  CommandAction[]
  commands        Command[]
  scripts         Script[]
  auditLogs       AuditLog[]
  settingsUpdates Setting[]
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
  
  // Relacionamentos
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  category    String
  
  // Relacionamentos
  rolePermissions RolePermission[]
  
  @@map("permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  
  // Relacionamentos
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("system_configs")
}

model SystemLog {
  id        String   @id @default(cuid())
  level     LogLevel
  action    String
  message   String
  details   Json?
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  // Relacionamentos
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("system_logs")
}

model FileUpload {
  id           String   @id @default(cuid())
  originalName String
  filename     String   @unique
  mimetype     String
  size         Int
  path         String
  category     String?
  uploadedBy   String?
  createdAt    DateTime @default(now())
  
  @@map("file_uploads")
}

// Tabela para ações de alteração de data
model DateAction {
  id          String   @id @default(cuid())
  date        String   // Data aplicada (DD/MM/YYYY)
  userId      String
  appliedAt   DateTime @default(now())
  variables   Json?    // Variáveis de ambiente utilizadas
  
  // Relacionamentos
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("date_actions")
}

// Tabela para ações de restauração de banco
model DatabaseAction {
  id          String   @id @default(cuid())
  environment String   // Ambiente restaurado (DEV, TESTES, etc.)
  userId      String
  restoredAt  DateTime @default(now())
  variables   Json?    // Variáveis de ambiente utilizadas
  
  // Relacionamentos
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("database_actions")
}

// Tabela para scripts
model Script {
  id          String   @id @default(cuid())
  name        String
  filename    String
  content     String?
  description String?
  filePath    String?  // Caminho no volume persistente
  uploadedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  user        User          @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  actions     ScriptAction[]
  
  @@map("scripts")
}

// Tabela para ações de scripts
model ScriptAction {
  id         String      @id @default(cuid())
  scriptId   String
  action     ScriptActionType
  userId     String
  executedAt DateTime    @default(now())
  details    Json?
  
  // Relacionamentos
  script     Script      @relation(fields: [scriptId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("script_actions")
}

// Tabela para comandos
model Command {
  id          String   @id @default(cuid())
  name        String
  command     String
  description String?
  type        String   // Tipo do comando
  buttonType  String?  // Botão vinculado (date, database, scripts, etc.)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastExecuted DateTime?
  
  // Relacionamentos
  user        User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  executions  CommandAction[]
  
  @@map("commands")
}

// Tabela para execuções de comandos
model CommandAction {
  id         String   @id @default(cuid())
  commandId  String
  userId     String
  executedAt DateTime @default(now())
  result     Json?    // Resultado da execução
  success    Boolean  @default(true)
  
  // Relacionamentos
  command    Command  @relation(fields: [commandId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("command_actions")
}

// Tabela para configurações de personalização
model SystemCustomization {
  id          String   @id @default(cuid())
  title       String?
  logoHash    String?
  logoSize    Int      @default(48)
  backgroundHash String?
  backgroundOpacity Float @default(0.5)
  faviconHash String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("system_customizations")
}

// Tabela para variáveis de ambiente
model EnvironmentVariable {
  id          String   @id @default(cuid())
  category    VariableCategory
  key         String
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([category, key])
  @@map("environment_variables")
}

// Nova tabela para settings (formato chave-valor)
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  group     String   // 'general', 'data_env', 'db_env'
  updatedBy String
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  user      User     @relation(fields: [updatedBy], references: [id], onDelete: Cascade)
  
  @@map("settings")
}

// Nova tabela para audit logs
model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // 'LOGIN', 'DATABASE_RESTORE', 'SCRIPT_UPLOAD', 'COMMAND_EXECUTE'
  details   Json?    // Detalhes como "Restaurou o ambiente X", "Executou o comando Y"
  ipAddress String?
  createdAt DateTime @default(now())
  
  // Relacionamentos
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("audit_logs")
}

enum Role {
  ADMIN
  USER
}

enum LogLevel {
  INFO
  WARN
  ERROR
  DEBUG
}

enum ScriptActionType {
  UPLOAD
  UPDATE
  DELETE
  EXECUTE
}

enum VariableCategory {
  DATE
  DATABASE
  GENERAL
}
