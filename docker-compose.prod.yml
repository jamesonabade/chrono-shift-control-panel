
version: '3.8'

services:
  database:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sistema_db}
      - POSTGRES_USER=${POSTGRES_USER:-sistema_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-sistema_password_123}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sistema_user} -d ${POSTGRES_DB:-sistema_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - nginx_config:/etc/nginx/conf.d
      - ssl_certs:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    command: |
      sh -c "
      cat > /etc/nginx/conf.d/default.conf << 'EOF'
      upstream frontend {
          server frontend:8080;
      }
      
      upstream backend {
          server backend:3001;
      }
      
      server {
          listen 80;
          server_name _;
          
          # Health check endpoint
          location /health {
              access_log off;
              return 200 'healthy';
              add_header Content-Type text/plain;
          }
          
          # API routes - sempre primeiro para não conflitar
          location ${BASE_PATH:-}/api/ {
              proxy_pass http://backend/api/;
              proxy_set_header Host \$$host;
              proxy_set_header X-Real-IP \$$remote_addr;
              proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$$scheme;
              proxy_set_header X-Base-Path '${BASE_PATH:-}';
          }
          
          # Uploads estáticos
          location ${BASE_PATH:-}/uploads/ {
              proxy_pass http://backend/uploads/;
              proxy_set_header Host \$$host;
              proxy_set_header X-Real-IP \$$remote_addr;
              proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$$scheme;
              
              # Cache para uploads
              expires 1d;
              add_header Cache-Control 'public, immutable';
          }
          
          # Frontend - SPA com fallback
          location ${BASE_PATH:-}/ {
              proxy_pass http://frontend/;
              proxy_set_header Host \$$host;
              proxy_set_header X-Real-IP \$$remote_addr;
              proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$$scheme;
              proxy_set_header X-Base-Path '${BASE_PATH:-}';
              
              # Para SPA - fallback para index.html em caso de 404
              proxy_intercept_errors on;
              error_page 404 = @spa_fallback;
          }
          
          # Fallback para SPA
          location @spa_fallback {
              proxy_pass http://frontend/;
              proxy_set_header Host \$$host;
              proxy_set_header X-Real-IP \$$remote_addr;
              proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$$scheme;
              proxy_set_header X-Base-Path '${BASE_PATH:-}';
          }
      }
      EOF
      
      nginx -g 'daemon off;'
      "

  frontend:
    # Para usar imagem pré-construída, descomente a linha abaixo
    image: ${FRONTEND_IMAGE:-registry.uesb.br/sig-testes/timeeventos-frontend:latest}
    
    # Para construir automaticamente do repositório Git
    # build:
    #   context: https://github.com/${GITHUB_USER:-your-user}/${GITHUB_REPO:-your-repo}.git
    #   dockerfile: Dockerfile.frontend.prod
    
    expose:
      - "8080"
    environment:
      - NODE_ENV=production
      - VITE_APP_ENV=production
      - VITE_API_URL=${VITE_API_URL:-/api}
      - VITE_BASE_PATH=${BASE_PATH:-/}
      - VITE_PUBLIC_URL=${VITE_PUBLIC_URL:-}
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      backend:
        condition: service_healthy

  backend:
    # Para usar imagem pré-construída, descomente a linha abaixo
    image: ${BACKEND_IMAGE:-registry.uesb.br/sig-testes/timeeventos-backend:latest}
    
    # Para construir automaticamente do repositório Git
    # build:
    #   context: https://github.com/${GITHUB_USER:-your-user}/${GITHUB_REPO:-your-repo}.git#main:backend
    #   dockerfile: Dockerfile.prod
    
    expose:
      - "3001"
    volumes:
      # Volumes nomeados para persistência (gerenciados pelo Docker)
      - app_data:/app/data
      - app_scripts:/app/scripts
      - app_logs:/app/logs
      - app_uploads:/app/uploads
      # Socket do Docker para executar comandos
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATA_DIR=/app/data
      - SCRIPTS_DIR=/app/scripts
      - LOGS_DIR=/app/logs
      - UPLOADS_DIR=/app/uploads
      # Configurações de contexto
      - BASE_PATH=${BASE_PATH:-}
      - DOMAIN=${DOMAIN:-localhost}
      # Configurações de banco de dados
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-sistema_db}
      - DB_USER=${POSTGRES_USER:-sistema_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-sistema_password_123}
      # Configurações de segurança
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      - USER_PASSWORD=${USER_PASSWORD:-user123}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      # Configurações de personalização
      - SYSTEM_TITLE=${SYSTEM_TITLE:-PAINEL DE CONTROLE}
      - SYSTEM_SUBTITLE=${SYSTEM_SUBTITLE:-Sistema de Gerenciamento Docker}
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    privileged: true
    user: root
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  # Volumes nomeados gerenciados pelo Docker (sem bind com host)
  app_data:
    driver: local
    name: sistema_data_${STACK_NAME:-default}
  
  app_scripts:
    driver: local
    name: sistema_scripts_${STACK_NAME:-default}
  
  app_logs:
    driver: local
    name: sistema_logs_${STACK_NAME:-default}
  
  app_uploads:
    driver: local
    name: sistema_uploads_${STACK_NAME:-default}
  
  db_data:
    driver: local
    name: sistema_db_${STACK_NAME:-default}
  
  nginx_config:
    driver: local
    name: sistema_nginx_${STACK_NAME:-default}
  
  ssl_certs:
    driver: local
    name: sistema_ssl_${STACK_NAME:-default}

networks:
  app-network:
    driver: bridge
    name: sistema_network_${STACK_NAME:-default}
    internal: false
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Configurações para uso com Docker Swarm (opcional)
configs:
  system_config:
    external: true
    name: sistema_config_${STACK_NAME:-default}

# Secrets para uso com Docker Swarm (opcional)
secrets:
  admin_password:
    external: true
    name: sistema_admin_password_${STACK_NAME:-default}
  jwt_secret:
    external: true
    name: sistema_jwt_secret_${STACK_NAME:-default}
  db_password:
    external: true
    name: sistema_db_password_${STACK_NAME:-default}
